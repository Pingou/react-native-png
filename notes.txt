

@todo
/**
 * [√] Get palette
 * [√] Fix,
 * [√] Get data
 * - [√] 1 bit
 * - [√] 2 bit
 * - [√] 4 bit
 * - [√] 8 bit
 * [√] Get palette
 * [√] Get transparencies
 * [√] Set palette color
 * [√] Swap palette color
 * [√] Get background
 * [√] Set transparency
 * [√] Set opacity
 * [√] Set background
 * [√] Set pixel
 * [√] Update the isColorType checks
 * [√] Get other basics to work
 * [√] Get transparencies to work
 * [√] Get backgrounds to work
 * [x] Convert getters to look like plain properties
 * [√] Limit to 8 bit depth or less
 * Lint
 * Address @todos
 * Review code like a PR
 * Documentation (1)
 * Write tests!! (1)
 * Replace for loops with for of
 * Clean-up
 * Documentation (2)
 * Write tests!! (2)
 * Write app
 */

Tests
---
• Can I compare image with image created from RnPng?
• If so, can I integrate that with Jest?


• Size!
• Does not support reading or creation of interlaced images.
• Does not support bit depths of 16 or above.
• Can only handle images with a single IDAT chunk.
• The supported chunks are: IHDR, IDAT, PLTE, tRNS, bKGD, IEND.  That means the following ancillary chunks are not supported, and in most cases are irrelevant for the purpose of this library:
- ....
• Does not support PLTE for images that are not of color type 3.

Handle in future versions
dedupePalette()

TESTING
--
√ Need to test images that are not 32x32

QUESTION
--
• Why is 
PngSuite-2017jul19/tp1n3p08.png
  showing up with 4192 data entries and not 4096?  (difference 96 / 4 = 24)
• Are tRNS or bKGD written with lsb?


// readImageAsset('PngSuite-2017jul19/basn0g01.png')
// readImageAsset('PngSuite-2017jul19/basn0g02.png')
// readImageAsset('PngSuite-2017jul19/basn0g04.png')
// readImageAsset('PngSuite-2017jul19/basn0g08.png')
// readImageAsset('PngSuite-2017jul19/basn2c08.png')
// readImageAsset('PngSuite-2017jul19/basn3p01.png')
// readImageAsset('PngSuite-2017jul19/basn3p02.png')
// readImageAsset('PngSuite-2017jul19/basn3p04.png')
// readImageAsset('PngSuite-2017jul19/basn3p08.png')
// readImageAsset('PngSuite-2017jul19/basn4a08.png')
// readImageAsset('PngSuite-2017jul19/basn6a08.png')

// readImageAsset('PngSuite-2017jul19/tp0n0g08.png')  // x - not transparent for reference (logo on gray) 
// readImageAsset('PngSuite-2017jul19/tp0n2c08.png')  // x - not transparent for reference (logo on gray) 
// readImageAsset('PngSuite-2017jul19/tp0n3p08.png')  // x - not transparent for reference (logo on gray) 

// readImageAsset('PngSuite-2017jul19/tp1n3p08.png')  // - transparent, but no background chunk 
// readImageAsset('PngSuite-2017jul19/tm3n3p02.png')  // - multiple levels of transparency, 3 entries
// readImageAsset('PngSuite-2017jul19/tbbn0g04.png')  // - transparent, black background chunk
// readImageAsset('PngSuite-2017jul19/tbbn3p08.png')  // - transparent, black background chunk 

// readImageAsset('PngSuite-2017jul19/tbgn3p08.png')  // x - transparent, light-gray background chunk 

// readImageAsset('PngSuite-2017jul19/tbrn2c08.png')  // - transparent, red background chunk 
                                                      // NOTE: this mistakenly displays a white bg.
                                                      // Why???
// readImageAsset('PngSuite-2017jul19/tbwn3p08.png')  // x - transparent, white background chunk 
// readImageAsset('PngSuite-2017jul19/tbyn3p08.png')  // x - transparent, yellow background chunk

// readImageAsset('PngSuite-2017jul19/bgan6a08.png') // t - 3x8 bits rgb color, alpha, no background chunk 
// readImageAsset('PngSuite-2017jul19/bgbn4a08.png') // t - 8 bit grayscale, alpha, black background chunk 
// readImageAsset('PngSuite-2017jul19/bgwn6a08.png') // t - 3x8 bits rgb color, alpha, white background chunk 


// readImageAsset('PngSuite-2017jul19/s01n3p01.png') // - 1x1 paletted file, no interlacing 
// readImageAsset('PngSuite-2017jul19/s02n3p01.png') // - 2x2 paletted file, no interlacing 
// readImageAsset('PngSuite-2017jul19/s03n3p01.png') // - 3x3 paletted file, no interlacing 
// readImageAsset('PngSuite-2017jul19/s04n3p01.png') // - 4x4 paletted file, no interlacing 
// readImageAsset('PngSuite-2017jul19/s05n3p02.png') // - 5x5 paletted file, no interlacing 
// readImageAsset('PngSuite-2017jul19/s06n3p02.png') // - 6x6 paletted file, no interlacing 
// readImageAsset('PngSuite-2017jul19/s07n3p02.png') // - 7x7 paletted file, no interlacing 
// readImageAsset('PngSuite-2017jul19/s08n3p02.png') // - 8x8 paletted file, no interlacing 
// readImageAsset('PngSuite-2017jul19/s09n3p02.png') // - 9x9 paletted file, no interlacing 
// readImageAsset('PngSuite-2017jul19/s32n3p04.png') // - 32x32 paletted file, no interlacing 
// readImageAsset('PngSuite-2017jul19/s33n3p04.png') // - 33x33 paletted file, no interlacing 
// readImageAsset('PngSuite-2017jul19/s34n3p04.png') // - 34x34 paletted file, no interlacing 
// readImageAsset('PngSuite-2017jul19/s35n3p04.png') // - 35x35 paletted file, no interlacing 
// readImageAsset('PngSuite-2017jul19/s36n3p04.png') // - 36x36 paletted file, no interlacing 
// readImageAsset('PngSuite-2017jul19/s37n3p04.png') // - 37x37 paletted file, no interlacing 
// readImageAsset('PngSuite-2017jul19/s38n3p04.png') // - 38x38 paletted file, no interlacing 
// readImageAsset('PngSuite-2017jul19/s39n3p04.png') // - 39x39 paletted file, no interlacing 
// readImageAsset('PngSuite-2017jul19/s40n3p04.png') // - 40x40 paletted file, no interlacing

// NOT SUPPORTED
// readImageAsset('PngSuite-2017jul19/basn6a16.png') // Not supported
// readImageAsset('PngSuite-2017jul19/tbbn2c16.png') // Not supported - transparent, blue background chunk 
// readImageAsset('PngSuite-2017jul19/tbwn0g16.png') // Not supported - transparent, white background chunk 
// readImageAsset('PngSuite-2017jul19/tbgn2c16.png') // Not supported - transparent, green background chunk 
// readImageAsset('PngSuite-2017jul19/bgai4a08.png') // - 8 bit grayscale, alpha, no background chunk, interlaced 
// readImageAsset('PngSuite-2017jul19/bgai4a16.png') // - 16 bit grayscale, alpha, no background chunk, interlaced 
// readImageAsset('PngSuite-2017jul19/bgan6a16.png') // - 3x16 bits rgb color, alpha, no background chunk 
// readImageAsset('PngSuite-2017jul19/bggn4a16.png') // - 16 bit grayscale, alpha, gray background chunk 
// readImageAsset('PngSuite-2017jul19/bgyn6a16.png') // - 3x16 bits rgb color, alpha, yellow background chunk
// readImageAsset('PngSuite-2017jul19/s01i3p01.png') // - 1x1 paletted file, interlaced 
// readImageAsset('PngSuite-2017jul19/s02i3p01.png') // - 2x2 paletted file, interlaced 
// readImageAsset('PngSuite-2017jul19/s03i3p01.png') // - 3x3 paletted file, interlaced 
// readImageAsset('PngSuite-2017jul19/s04i3p01.png') // - 4x4 paletted file, interlaced 
// readImageAsset('PngSuite-2017jul19/s05i3p02.png') // - 5x5 paletted file, interlaced 
// readImageAsset('PngSuite-2017jul19/s06i3p02.png') // - 6x6 paletted file, interlaced 
// readImageAsset('PngSuite-2017jul19/s07i3p02.png') // - 7x7 paletted file, interlaced 
// readImageAsset('PngSuite-2017jul19/s08i3p02.png') // - 8x8 paletted file, interlaced 
// readImageAsset('PngSuite-2017jul19/s09i3p02.png') // - 9x9 paletted file, interlaced 
// readImageAsset('PngSuite-2017jul19/s32i3p04.png') // - 32x32 paletted file, interlaced 
// readImageAsset('PngSuite-2017jul19/s33i3p04.png') // - 33x33 paletted file, interlaced 
// readImageAsset('PngSuite-2017jul19/s34i3p04.png') // - 34x34 paletted file, interlaced 
// readImageAsset('PngSuite-2017jul19/s35i3p04.png') // - 35x35 paletted file, interlaced 
// readImageAsset('PngSuite-2017jul19/s36i3p04.png') // - 36x36 paletted file, interlaced 
// readImageAsset('PngSuite-2017jul19/s37i3p04.png') // - 37x37 paletted file, interlaced 
// readImageAsset('PngSuite-2017jul19/s38i3p04.png') // - 38x38 paletted file, interlaced 
// readImageAsset('PngSuite-2017jul19/s39i3p04.png') // - 39x39 paletted file, interlaced 
// readImageAsset('PngSuite-2017jul19/s40i3p04.png') // - 40x40 paletted file, interlaced 


//   .then((imageData) => {
//     const { sourceImageData } = this.state;
//     sourceImageData.pngSuite = imageData;
//     this.setState({ sourceImageData });
//   })
//   .catch((err) => {
//     console.warn(err.message, err.code);
//   });

// // readImageAsset('test-pattern_6_15x15.png')
// readImageAsset('small-test_3_15x15.png')  // Has tRNS
// // readImageAsset('tiny-gray_0_3x3.png')
// // readImageAsset('shades-of-gray.png')
// // readImageAsset('test-pattern_2_23x12_2.png')
// // readImageAsset('test-pattern_2_23x50_1.png')
// // readImageAsset('test-pattern_2_100x100.png')
// // readImageAsset('test-pattern_2_200x200.png')
//   .then((imageData) => {
//     const { sourceImageData } = this.state;
//     sourceImageData.test = imageData;
//     this.setState({ sourceImageData });
//   })
//   .catch((err) => {
//     console.warn(err.message, err.code);
//   });

// // readImageAsset('test-pattern_6_15x15.png')
// readImageAsset('test-pattern_6_23x12.png')
// // readImageAsset('test-pattern_2_23x12_2.png')
// // readImageAsset('test-pattern_2_23x50_1.png')
// // readImageAsset('test-pattern_2_100x100.png')
// // readImageAsset('test-pattern_2_200x200.png')
//   .then((imageData) => {
//     const { sourceImageData } = this.state;
//     sourceImageData.pattern = imageData;
//     this.setState({ sourceImageData });
//   })
//   .catch((err) => {
//     console.warn(err.message, err.code);
//   });

// readImageAsset('palette.png')
//   .then((imageData) => {
//     const { sourceImageData } = this.state;
//     sourceImageData.palette = imageData;
//     this.setState({ sourceImageData });
//   })
//   .catch((err) => {
//     console.warn(err.message, err.code);
//   });

// // readImageAsset('spectrum_big.png')
// readImageAsset('spectrum_2_100x100.png')
//   .then((imageData) => {
//     const { sourceImageData } = this.state;
//     sourceImageData.spectrum_2_300x300 = imageData;
//     this.setState({ sourceImageData });
//   })
//   .catch((err) => {
//     console.warn(err.message, err.code);
//   });

// readImageAsset('tiny-gray.png')
// // readImageAsset('tiny-with-blue_2.png')
//   .then((imageData) => {
//     const { sourceImageData } = this.state;
//     sourceImageData.tiny = imageData;
//     this.setState({ sourceImageData });
//   })
//   .catch((err) => {
//     console.warn(err.message, err.code);
//   });


